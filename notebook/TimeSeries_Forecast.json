{
	"name": "TimeSeries_Forecast",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "dnmay25spool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c75f6bab-9d6a-4ee1-b464-a3beae73063c/resourceGroups/dnmay25Demo/providers/Microsoft.Synapse/workspaces/dnmay25demows/bigDataPools/dnmay25spool",
				"name": "dnmay25spool",
				"type": "Spark",
				"endpoint": "https://dnmay25demows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dnmay25spool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Time Series Forecasting for Borough and zone demand forecasts\n",
					"\n",
					"The notebook ingests, visualizes, prepares.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# spark imports\n",
					"from pyspark.sql.functions import unix_timestamp\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql.functions import *\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# additional imports for this model\r\n",
					"import warnings\r\n",
					"import itertools\r\n",
					"import numpy as np\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"warnings.filterwarnings(\"ignore\")\r\n",
					"plt.style.use('fivethirtyeight')\r\n",
					"import pandas as pd\r\n",
					"import statsmodels.api as sm\r\n",
					"\r\n",
					"plt.rcParams['axes.labelsize'] = 14\r\n",
					"plt.rcParams['xtick.labelsize'] = 12\r\n",
					"plt.rcParams['ytick.labelsize'] = 12\r\n",
					"plt.rcParams['text.color'] = 'k'"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Ingest Data - Let's start with Borough level forcasing \n",
					"\n",
					"Get the data generated by our SQL view and stored in the external table"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write data to Azure Storage Blob (Copied from sample notebook - Read and write data from Azure Blob Storage WASB)\r\n",
					"## Very useful information here\r\n",
					"\r\n",
					"Synapse leverage **Shared access signature (SAS)** to access Azure Blob Storage. To avoid exposing SAS keys in the code, we recommend creating a new linked service in Synapse workspace to the Azure Blob Storage account you want to access.\r\n",
					"\r\n",
					"Follow these steps to add a new linked service for an Azure Blob Storage account:\r\n",
					"\r\n",
					"1. Open the [Azure Synapse Studio](https://web.azuresynapse.net/).\r\n",
					"2. Select **Manage** from the left panel and select **Linked services** under the **External connections**.\r\n",
					"3. Search **Azure Blob Storage** in the **New linked Service** panel on the right.\r\n",
					"4. Select **Continue**.\r\n",
					"5. Select the Azure Blob Storage Account to access and configure the linked service name. Suggest using **Account key** for the **Authentication method**.\r\n",
					"6. Select **Test connection** to validate the settings are correct.\r\n",
					"7. Select **Create** first and click **Publish all** to save your changes.\r\n",
					"\r\n",
					"You can access data on Azure Blob Storage with Synapse Spark via following URL:\r\n",
					"\r\n",
					"```wasb[s]://<container_name>@<storage_account_name>.blob.core.windows.net/```\r\n",
					"\r\n",
					"Please make sure to allow contatiner level read and write permission. Fill in the access info for your Azure storage blob in the cell below. \r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Azure storage access info\r\n",
					"blob_account_name = 'dnmay25gen2' \r\n",
					"blob_container_name = 'dnmay25users' \r\n",
					"blob_relative_path = 'user/agg_Boroughdemand/' \r\n",
					"linked_service_name = 'AzureBlobStorage1' \r\n",
					"\r\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Allow SPARK to access from Blob remotely\r\n",
					"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\r\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
					"print('Remote blob path: ' + wasbs_path)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Use a wildcard to load all the parquet files in the folder to a data frame\r\n",
					"demand_df = spark.read.parquet(wasbs_path + '17EC7D74-3ACC-4004-8CB5-BAA4F860E162_*.parquet')"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Get data into a pandas dataframe\r\n",
					"demand = demand_df.toPandas()"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": true
				},
				"source": [
					"%%sql\r\n",
					"SELECT Count(*) as TotalRecs, max(boroughID) as NumBoroughs FROM [nyctaxiDB].[dbo].[HourlyBoroughDemand]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# A quick check - is the record count the same as SQL   \r\n",
					"demand.info() "
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"source": [
					"# Work with a subset\n",
					"sampled_demand = demand.sample(True, 0.001, seed=1234)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# drop the columns we dont need and see whats left\r\n",
					"cols = ['FcstPeriod', 'BoroughID']\r\n",
					"sampled_demand.drop(cols, axis=1, inplace=True)\r\n",
					"sampled_demand = sampled_demand.sort_values('FcstPeriodDate')"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"sampled_demand.head(10)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Run for each borough 1 - 7\r\n",
					"borough = sampled_demand.loc[sampled_demand['BoroughID'] == 2]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"borough = borough.set_index('FcstPeriodDate')\r\n",
					"borough.index"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"borough = borough['Demand'].resample('MS').sum()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"borough"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"borough.info()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"borough.plot(figsize=(15, 6))\r\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pylab import rcParams\r\n",
					"rcParams['figure.figsize'] = 18, 8"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"decomposition = sm.tsa.seasonal_decompose(borough, model='additive')\r\n",
					"fig = decomposition.plot()\r\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Time series forecasting with ARIMA\r\n",
					"\r\n",
					"ARIMA models are denoted with the notation ARIMA(p, d, q). These three parameters account for seasonality, trend, and noise in data:"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"p = d = q = range(0, 2)\r\n",
					"pdq = list(itertools.product(p, d, q))\r\n",
					"seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"for param in pdq:\r\n",
					"    for param_seasonal in seasonal_pdq:\r\n",
					"        try:\r\n",
					"            mod = sm.tsa.statespace.SARIMAX(y, order=param, seasonal_order=param_seasonal, enforce_stationarity=False, enforce_invertibility=False)\r\n",
					"            results = mod.fit()    \r\n",
					"            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))          \r\n",
					"        except:\r\n",
					"            continue"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Select the parameters for the lowest AIC\r\n",
					"mod = sm.tsa.statespace.SARIMAX(y,\r\n",
					"                                order=(1, 1, 1),\r\n",
					"                                seasonal_order=(1, 1, 0, 12),\r\n",
					"                                enforce_stationarity=False,\r\n",
					"                                enforce_invertibility=False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"results = mod.fit()\r\n",
					"print(results.summary().tables[1])"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"results.plot_diagnostics(figsize=(16, 8))\r\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\r\n",
					"pred_ci = pred.conf_int()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"ax = y['2014':].plot(label='observed')\r\n",
					"pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\r\n",
					"ax.fill_between(pred_ci.index,\r\n",
					"                pred_ci.iloc[:, 0],\r\n",
					"                pred_ci.iloc[:, 1], color='k', alpha=.2)\r\n",
					"ax.set_xlabel('Date')\r\n",
					"ax.set_ylabel('Taxi Demand')\r\n",
					"plt.legend()\r\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"y_forecasted = pred.predicted_mean\r\n",
					"y_truth = y['2017-01-01':]\r\n",
					"mse = ((y_forecasted - y_truth) ** 2).mean()\r\n",
					"print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"print('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"pred_uc = results.get_forecast(steps=100)\r\n",
					"pred_ci = pred_uc.conf_int()\r\n",
					"ax = y.plot(label='observed', figsize=(14, 7))\r\n",
					"pred_uc.predicted_mean.plot(ax=ax, label='Forecast')\r\n",
					"ax.fill_between(pred_ci.index,\r\n",
					"                pred_ci.iloc[:, 0],\r\n",
					"                pred_ci.iloc[:, 1], color='k', alpha=.25)\r\n",
					"ax.set_xlabel('Date')\r\n",
					"ax.set_ylabel('Taxi Demand')\r\n",
					"plt.legend()\r\n",
					"plt.show()"
				],
				"execution_count": null
			}
		]
	}
}